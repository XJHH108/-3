2023/02/13 16:26:07 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 0
    GPU 0: Tesla V100-SXM2-32GB
    CUDA_HOME: /data/apps/cuda/10.0
    NVCC: Cuda compilation tools, release 10.0, V10.0.13
    GCC: gcc (GCC) 7.3.0
    PyTorch: 1.13.1+cu117
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.14.1+cu117
    OpenCV: 4.7.0
    MMEngine: 0.5.0

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 0
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/02/13 10:29:08 - mmengine - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(512, 1024))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(256, 256)),
    pretrained=
    '/data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth',
    backbone=dict(
        type='ResNetV1c',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='PSPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        pool_scales=(1, 2, 3, 6),
        dropout_ratio=0.1,
        num_classes=2,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=2,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'StanfordBackgroundDataset'
data_root = '/data/home/scv9243/run/mmsegmentation/data/Glomeruli-dataset'
crop_size = (256, 256)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        type='RandomResize',
        scale=(320, 240),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(256, 256), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PackSegInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(320, 240), keep_ratio=True),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=dict(backend='local')),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
train_dataloader = dict(
    batch_size=8,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='StanfordBackgroundDataset',
        data_root=
        '/data/home/scv9243/run/mmsegmentation/data/Glomeruli-dataset',
        data_prefix=dict(img_path='images', seg_map_path='masks'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='RandomResize',
                scale=(320, 240),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(256, 256), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PackSegInputs')
        ],
        ann_file='splits/train.txt'))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='StanfordBackgroundDataset',
        data_root=
        '/data/home/scv9243/run/mmsegmentation/data/Glomeruli-dataset',
        data_prefix=dict(img_path='images', seg_map_path='masks'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(320, 240), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ],
        ann_file='splits/val.txt'))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='StanfordBackgroundDataset',
        data_root=
        '/data/home/scv9243/run/mmsegmentation/data/Glomeruli-dataset',
        data_prefix=dict(img_path='images', seg_map_path='masks'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(320, 240), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ],
        ann_file='splits/val.txt'))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = '/data/home/scv9243/run/mmsegmentation/checkpoint/pspnet_r50-d8_512x1024_40k_cityscapes_20200605_003338-2966598c.pth'
resume = False
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005),
    clip_grad=None)
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=0.0001,
        power=0.9,
        begin=0,
        end=40000,
        by_epoch=False)
]
train_cfg = dict(type='IterBasedTrainLoop', max_iters=800, val_interval=400)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=100, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', by_epoch=False, interval=400),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook'))
work_dir = '/data/home/scv9243/run/mmsegmentation/work_dirs/pspnet'
randomness = dict(seed=0)

2023/02/13 10:29:08 - mmengine - WARNING - The "visualizer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 10:29:08 - mmengine - WARNING - The "vis_backend" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 10:29:09 - mmengine - WARNING - The "model" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 10:29:14 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/02/13 10:29:14 - mmengine - WARNING - The "hook" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 10:29:14 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/02/13 10:29:15 - mmengine - WARNING - The "loop" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 10:29:15 - mmengine - WARNING - The "dataset" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 10:29:15 - mmengine - WARNING - The "transform" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 10:29:15 - mmengine - WARNING - The "data sampler" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 10:29:15 - mmengine - WARNING - The "optimizer wrapper constructor" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 10:29:15 - mmengine - WARNING - The "optimizer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 10:29:15 - mmengine - WARNING - The "optim_wrapper" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 10:29:15 - mmengine - WARNING - The "parameter scheduler" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 10:29:15 - mmengine - WARNING - The "metric" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 10:29:16 - mmengine - WARNING - The "weight initializer" registry in mmseg did not set import location. Fallback to call `mmseg.utils.register_all_modules` instead.
2023/02/13 10:29:16 - mmengine - INFO - load model from: /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth
2023/02/13 10:29:16 - mmengine - INFO - Loads checkpoint by local backend from path: /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth
2023/02/13 10:29:16 - mmengine - WARNING - The model and loaded state dict do not match exactly

size mismatch for layer1.0.downsample.1.weight: copying a param with shape torch.Size([256, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for layer2.0.downsample.1.weight: copying a param with shape torch.Size([512, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for layer3.0.downsample.1.weight: copying a param with shape torch.Size([1024, 512, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for layer4.0.downsample.1.weight: copying a param with shape torch.Size([2048, 1024, 1, 1]) from checkpoint, the shape in current model is torch.Size([2048]).
unexpected key in source state_dict: layer1.0.conv2.conv.weight, layer1.0.conv2.bn0.weight, layer1.0.conv2.bn0.bias, layer1.0.conv2.bn0.running_mean, layer1.0.conv2.bn0.running_var, layer1.0.conv2.fc1.weight, layer1.0.conv2.fc1.bias, layer1.0.conv2.bn1.weight, layer1.0.conv2.bn1.bias, layer1.0.conv2.bn1.running_mean, layer1.0.conv2.bn1.running_var, layer1.0.conv2.fc2.weight, layer1.0.conv2.fc2.bias, layer1.0.downsample.2.weight, layer1.0.downsample.2.bias, layer1.0.downsample.2.running_mean, layer1.0.downsample.2.running_var, layer1.1.conv2.conv.weight, layer1.1.conv2.bn0.weight, layer1.1.conv2.bn0.bias, layer1.1.conv2.bn0.running_mean, layer1.1.conv2.bn0.running_var, layer1.1.conv2.fc1.weight, layer1.1.conv2.fc1.bias, layer1.1.conv2.bn1.weight, layer1.1.conv2.bn1.bias, layer1.1.conv2.bn1.running_mean, layer1.1.conv2.bn1.running_var, layer1.1.conv2.fc2.weight, layer1.1.conv2.fc2.bias, layer1.2.conv2.conv.weight, layer1.2.conv2.bn0.weight, layer1.2.conv2.bn0.bias, layer1.2.conv2.bn0.running_mean, layer1.2.conv2.bn0.running_var, layer1.2.conv2.fc1.weight, layer1.2.conv2.fc1.bias, layer1.2.conv2.bn1.weight, layer1.2.conv2.bn1.bias, layer1.2.conv2.bn1.running_mean, layer1.2.conv2.bn1.running_var, layer1.2.conv2.fc2.weight, layer1.2.conv2.fc2.bias, layer2.0.conv2.conv.weight, layer2.0.conv2.bn0.weight, layer2.0.conv2.bn0.bias, layer2.0.conv2.bn0.running_mean, layer2.0.conv2.bn0.running_var, layer2.0.conv2.fc1.weight, layer2.0.conv2.fc1.bias, layer2.0.conv2.bn1.weight, layer2.0.conv2.bn1.bias, layer2.0.conv2.bn1.running_mean, layer2.0.conv2.bn1.running_var, layer2.0.conv2.fc2.weight, layer2.0.conv2.fc2.bias, layer2.0.downsample.2.weight, layer2.0.downsample.2.bias, layer2.0.downsample.2.running_mean, layer2.0.downsample.2.running_var, layer2.1.conv2.conv.weight, layer2.1.conv2.bn0.weight, layer2.1.conv2.bn0.bias, layer2.1.conv2.bn0.running_mean, layer2.1.conv2.bn0.running_var, layer2.1.conv2.fc1.weight, layer2.1.conv2.fc1.bias, layer2.1.conv2.bn1.weight, layer2.1.conv2.bn1.bias, layer2.1.conv2.bn1.running_mean, layer2.1.conv2.bn1.running_var, layer2.1.conv2.fc2.weight, layer2.1.conv2.fc2.bias, layer2.2.conv2.conv.weight, layer2.2.conv2.bn0.weight, layer2.2.conv2.bn0.bias, layer2.2.conv2.bn0.running_mean, layer2.2.conv2.bn0.running_var, layer2.2.conv2.fc1.weight, layer2.2.conv2.fc1.bias, layer2.2.conv2.bn1.weight, layer2.2.conv2.bn1.bias, layer2.2.conv2.bn1.running_mean, layer2.2.conv2.bn1.running_var, layer2.2.conv2.fc2.weight, layer2.2.conv2.fc2.bias, layer2.3.conv2.conv.weight, layer2.3.conv2.bn0.weight, layer2.3.conv2.bn0.bias, layer2.3.conv2.bn0.running_mean, layer2.3.conv2.bn0.running_var, layer2.3.conv2.fc1.weight, layer2.3.conv2.fc1.bias, layer2.3.conv2.bn1.weight, layer2.3.conv2.bn1.bias, layer2.3.conv2.bn1.running_mean, layer2.3.conv2.bn1.running_var, layer2.3.conv2.fc2.weight, layer2.3.conv2.fc2.bias, layer3.0.conv2.conv.weight, layer3.0.conv2.bn0.weight, layer3.0.conv2.bn0.bias, layer3.0.conv2.bn0.running_mean, layer3.0.conv2.bn0.running_var, layer3.0.conv2.fc1.weight, layer3.0.conv2.fc1.bias, layer3.0.conv2.bn1.weight, layer3.0.conv2.bn1.bias, layer3.0.conv2.bn1.running_mean, layer3.0.conv2.bn1.running_var, layer3.0.conv2.fc2.weight, layer3.0.conv2.fc2.bias, layer3.0.downsample.2.weight, layer3.0.downsample.2.bias, layer3.0.downsample.2.running_mean, layer3.0.downsample.2.running_var, layer3.1.conv2.conv.weight, layer3.1.conv2.bn0.weight, layer3.1.conv2.bn0.bias, layer3.1.conv2.bn0.running_mean, layer3.1.conv2.bn0.running_var, layer3.1.conv2.fc1.weight, layer3.1.conv2.fc1.bias, layer3.1.conv2.bn1.weight, layer3.1.conv2.bn1.bias, layer3.1.conv2.bn1.running_mean, layer3.1.conv2.bn1.running_var, layer3.1.conv2.fc2.weight, layer3.1.conv2.fc2.bias, layer3.2.conv2.conv.weight, layer3.2.conv2.bn0.weight, layer3.2.conv2.bn0.bias, layer3.2.conv2.bn0.running_mean, layer3.2.conv2.bn0.running_var, layer3.2.conv2.fc1.weight, layer3.2.conv2.fc1.bias, layer3.2.conv2.bn1.weight, layer3.2.conv2.bn1.bias, layer3.2.conv2.bn1.running_mean, layer3.2.conv2.bn1.running_var, layer3.2.conv2.fc2.weight, layer3.2.conv2.fc2.bias, layer3.3.conv2.conv.weight, layer3.3.conv2.bn0.weight, layer3.3.conv2.bn0.bias, layer3.3.conv2.bn0.running_mean, layer3.3.conv2.bn0.running_var, layer3.3.conv2.fc1.weight, layer3.3.conv2.fc1.bias, layer3.3.conv2.bn1.weight, layer3.3.conv2.bn1.bias, layer3.3.conv2.bn1.running_mean, layer3.3.conv2.bn1.running_var, layer3.3.conv2.fc2.weight, layer3.3.conv2.fc2.bias, layer3.4.conv2.conv.weight, layer3.4.conv2.bn0.weight, layer3.4.conv2.bn0.bias, layer3.4.conv2.bn0.running_mean, layer3.4.conv2.bn0.running_var, layer3.4.conv2.fc1.weight, layer3.4.conv2.fc1.bias, layer3.4.conv2.bn1.weight, layer3.4.conv2.bn1.bias, layer3.4.conv2.bn1.running_mean, layer3.4.conv2.bn1.running_var, layer3.4.conv2.fc2.weight, layer3.4.conv2.fc2.bias, layer3.5.conv2.conv.weight, layer3.5.conv2.bn0.weight, layer3.5.conv2.bn0.bias, layer3.5.conv2.bn0.running_mean, layer3.5.conv2.bn0.running_var, layer3.5.conv2.fc1.weight, layer3.5.conv2.fc1.bias, layer3.5.conv2.bn1.weight, layer3.5.conv2.bn1.bias, layer3.5.conv2.bn1.running_mean, layer3.5.conv2.bn1.running_var, layer3.5.conv2.fc2.weight, layer3.5.conv2.fc2.bias, layer4.0.conv2.conv.weight, layer4.0.conv2.bn0.weight, layer4.0.conv2.bn0.bias, layer4.0.conv2.bn0.running_mean, layer4.0.conv2.bn0.running_var, layer4.0.conv2.fc1.weight, layer4.0.conv2.fc1.bias, layer4.0.conv2.bn1.weight, layer4.0.conv2.bn1.bias, layer4.0.conv2.bn1.running_mean, layer4.0.conv2.bn1.running_var, layer4.0.conv2.fc2.weight, layer4.0.conv2.fc2.bias, layer4.0.downsample.2.weight, layer4.0.downsample.2.bias, layer4.0.downsample.2.running_mean, layer4.0.downsample.2.running_var, layer4.1.conv2.conv.weight, layer4.1.conv2.bn0.weight, layer4.1.conv2.bn0.bias, layer4.1.conv2.bn0.running_mean, layer4.1.conv2.bn0.running_var, layer4.1.conv2.fc1.weight, layer4.1.conv2.fc1.bias, layer4.1.conv2.bn1.weight, layer4.1.conv2.bn1.bias, layer4.1.conv2.bn1.running_mean, layer4.1.conv2.bn1.running_var, layer4.1.conv2.fc2.weight, layer4.1.conv2.fc2.bias, layer4.2.conv2.conv.weight, layer4.2.conv2.bn0.weight, layer4.2.conv2.bn0.bias, layer4.2.conv2.bn0.running_mean, layer4.2.conv2.bn0.running_var, layer4.2.conv2.fc1.weight, layer4.2.conv2.fc1.bias, layer4.2.conv2.bn1.weight, layer4.2.conv2.bn1.bias, layer4.2.conv2.bn1.running_mean, layer4.2.conv2.bn1.running_var, layer4.2.conv2.fc2.weight, layer4.2.conv2.fc2.bias

missing keys in source state_dict: layer1.0.conv2.weight, layer1.0.bn2.weight, layer1.0.bn2.bias, layer1.0.bn2.running_mean, layer1.0.bn2.running_var, layer1.0.downsample.0.weight, layer1.0.downsample.1.bias, layer1.0.downsample.1.running_mean, layer1.0.downsample.1.running_var, layer1.1.conv2.weight, layer1.1.bn2.weight, layer1.1.bn2.bias, layer1.1.bn2.running_mean, layer1.1.bn2.running_var, layer1.2.conv2.weight, layer1.2.bn2.weight, layer1.2.bn2.bias, layer1.2.bn2.running_mean, layer1.2.bn2.running_var, layer2.0.conv2.weight, layer2.0.bn2.weight, layer2.0.bn2.bias, layer2.0.bn2.running_mean, layer2.0.bn2.running_var, layer2.0.downsample.0.weight, layer2.0.downsample.1.bias, layer2.0.downsample.1.running_mean, layer2.0.downsample.1.running_var, layer2.1.conv2.weight, layer2.1.bn2.weight, layer2.1.bn2.bias, layer2.1.bn2.running_mean, layer2.1.bn2.running_var, layer2.2.conv2.weight, layer2.2.bn2.weight, layer2.2.bn2.bias, layer2.2.bn2.running_mean, layer2.2.bn2.running_var, layer2.3.conv2.weight, layer2.3.bn2.weight, layer2.3.bn2.bias, layer2.3.bn2.running_mean, layer2.3.bn2.running_var, layer3.0.conv2.weight, layer3.0.bn2.weight, layer3.0.bn2.bias, layer3.0.bn2.running_mean, layer3.0.bn2.running_var, layer3.0.downsample.0.weight, layer3.0.downsample.1.bias, layer3.0.downsample.1.running_mean, layer3.0.downsample.1.running_var, layer3.1.conv2.weight, layer3.1.bn2.weight, layer3.1.bn2.bias, layer3.1.bn2.running_mean, layer3.1.bn2.running_var, layer3.2.conv2.weight, layer3.2.bn2.weight, layer3.2.bn2.bias, layer3.2.bn2.running_mean, layer3.2.bn2.running_var, layer3.3.conv2.weight, layer3.3.bn2.weight, layer3.3.bn2.bias, layer3.3.bn2.running_mean, layer3.3.bn2.running_var, layer3.4.conv2.weight, layer3.4.bn2.weight, layer3.4.bn2.bias, layer3.4.bn2.running_mean, layer3.4.bn2.running_var, layer3.5.conv2.weight, layer3.5.bn2.weight, layer3.5.bn2.bias, layer3.5.bn2.running_mean, layer3.5.bn2.running_var, layer4.0.conv2.weight, layer4.0.bn2.weight, layer4.0.bn2.bias, layer4.0.bn2.running_mean, layer4.0.bn2.running_var, layer4.0.downsample.0.weight, layer4.0.downsample.1.bias, layer4.0.downsample.1.running_mean, layer4.0.downsample.1.running_var, layer4.1.conv2.weight, layer4.1.bn2.weight, layer4.1.bn2.bias, layer4.1.bn2.running_mean, layer4.1.bn2.running_var, layer4.2.conv2.weight, layer4.2.bn2.weight, layer4.2.bn2.bias, layer4.2.bn2.running_mean, layer4.2.bn2.running_var

Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.stem.1.weight - torch.Size([32]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.stem.1.bias - torch.Size([32]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.stem.4.weight - torch.Size([32]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.stem.4.bias - torch.Size([32]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.stem.7.weight - torch.Size([64]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.stem.7.bias - torch.Size([64]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from /data/home/scv9243/run/mmsegmentation/checkpoint/resnest50_d2-7497a55b.pth 

decode_head.conv_seg.weight - torch.Size([2, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.psp_modules.0.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([512, 4096, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([2, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([256, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023/02/13 10:29:16 - mmengine - INFO - Load checkpoint from /data/home/scv9243/run/mmsegmentation/checkpoint/pspnet_r50-d8_512x1024_40k_cityscapes_20200605_003338-2966598c.pth
2023/02/13 10:29:16 - mmengine - INFO - Checkpoints will be saved to /data/home/scv9243/run/mmsegmentation/work_dirs/pspnet.
2023/02/13 10:29:44 - mmengine - INFO - Iter(train) [100/800]  lr: 9.9779e-03  eta: 0:03:13  time: 0.2070  data_time: 0.0124  memory: 19441  loss: 0.0483  decode.loss_ce: 0.0323  decode.acc_seg: 93.1748  aux.loss_ce: 0.0160  aux.acc_seg: 93.1748
2023/02/13 10:30:05 - mmengine - INFO - Iter(train) [200/800]  lr: 9.9557e-03  eta: 0:02:26  time: 0.2140  data_time: 0.0183  memory: 3774  loss: 0.0597  decode.loss_ce: 0.0409  decode.acc_seg: 98.9483  aux.loss_ce: 0.0188  aux.acc_seg: 98.0014
2023/02/13 10:30:17 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_cityscapes-512x1024_20230213_102904
2023/02/13 10:30:26 - mmengine - INFO - Iter(train) [300/800]  lr: 9.9334e-03  eta: 0:01:55  time: 0.2038  data_time: 0.0082  memory: 3774  loss: 0.0389  decode.loss_ce: 0.0269  decode.acc_seg: 98.8232  aux.loss_ce: 0.0120  aux.acc_seg: 98.8232
2023/02/13 10:30:46 - mmengine - INFO - Iter(train) [400/800]  lr: 9.9111e-03  eta: 0:01:29  time: 0.2026  data_time: 0.0076  memory: 3774  loss: 0.0416  decode.loss_ce: 0.0284  decode.acc_seg: 99.8933  aux.loss_ce: 0.0132  aux.acc_seg: 100.0000
2023/02/13 10:30:46 - mmengine - INFO - Saving checkpoint at 400 iterations
2023/02/13 10:30:52 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:15  time: 0.0233  data_time: 0.0027  memory: 18122  
2023/02/13 10:30:55 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:09  time: 0.0219  data_time: 0.0024  memory: 808  
2023/02/13 10:30:57 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:05  time: 0.0236  data_time: 0.0027  memory: 808  
2023/02/13 10:30:59 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:03  time: 0.0224  data_time: 0.0026  memory: 808  
2023/02/13 10:31:02 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0230  data_time: 0.0024  memory: 808  
2023/02/13 10:31:02 - mmengine - INFO - per class results:
2023/02/13 10:31:02 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.01 | 99.39 |
| glomeruili |  61.5 | 80.38 |
+------------+-------+-------+
2023/02/13 10:31:02 - mmengine - INFO - Iter(val) [515/515]  aAcc: 99.0300  mIoU: 80.2500  mAcc: 89.8900
2023/02/13 10:31:22 - mmengine - INFO - Iter(train) [500/800]  lr: 9.8888e-03  eta: 0:01:05  time: 0.2023  data_time: 0.0075  memory: 3774  loss: 0.0257  decode.loss_ce: 0.0164  decode.acc_seg: 99.3567  aux.loss_ce: 0.0093  aux.acc_seg: 98.5794
2023/02/13 10:31:42 - mmengine - INFO - Iter(train) [600/800]  lr: 9.8665e-03  eta: 0:00:43  time: 0.2025  data_time: 0.0074  memory: 3774  loss: 0.0336  decode.loss_ce: 0.0224  decode.acc_seg: 98.2743  aux.loss_ce: 0.0112  aux.acc_seg: 96.6077
2023/02/13 10:32:03 - mmengine - INFO - Iter(train) [700/800]  lr: 9.8442e-03  eta: 0:00:21  time: 0.2035  data_time: 0.0078  memory: 3774  loss: 0.0207  decode.loss_ce: 0.0146  decode.acc_seg: 99.9817  aux.loss_ce: 0.0062  aux.acc_seg: 100.0000
2023/02/13 10:32:23 - mmengine - INFO - Iter(train) [800/800]  lr: 9.8218e-03  eta: 0:00:00  time: 0.2034  data_time: 0.0080  memory: 3774  loss: 0.0400  decode.loss_ce: 0.0263  decode.acc_seg: 98.8920  aux.loss_ce: 0.0137  aux.acc_seg: 97.7973
2023/02/13 10:32:23 - mmengine - INFO - Saving checkpoint at 800 iterations
2023/02/13 10:32:28 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:09  time: 0.0218  data_time: 0.0025  memory: 808  
2023/02/13 10:32:30 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:07  time: 0.0220  data_time: 0.0025  memory: 808  
2023/02/13 10:32:33 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:04  time: 0.0214  data_time: 0.0024  memory: 808  
2023/02/13 10:32:35 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:02  time: 0.0223  data_time: 0.0025  memory: 808  
2023/02/13 10:32:37 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0218  data_time: 0.0024  memory: 808  
2023/02/13 10:32:37 - mmengine - INFO - per class results:
2023/02/13 10:32:37 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.42 | 99.73 |
| glomeruili | 74.17 | 84.29 |
+------------+-------+-------+
2023/02/13 10:32:37 - mmengine - INFO - Iter(val) [515/515]  aAcc: 99.4300  mIoU: 86.7900  mAcc: 92.0100
